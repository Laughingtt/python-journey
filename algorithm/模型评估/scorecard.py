#!/usr/bin/python
# -*- coding: UTF-8 -*-

"""
@company:UDAI
@author:tianjian
@file:scorecard_test.py
@time:2020/11/27

"""

import numpy as np
import pandas as pd
import matplotlib.pylab as plt
import time
from scipy.ndimage.interpolation import shift
from functools import wraps


def log_elapsed(func):
    func_name = func.__name__

    @wraps(func)
    def _fn(*args, **kwargs):
        t = time.time()
        rtn = func(*args, **kwargs)
        print(func_name, "耗时:%.4f s" % (time.time() - t))
        return rtn

    return _fn


@log_elapsed
def Xinye_ks_roc(df, label='bad', score='score', roc_plot=False, ks_plot=False):
    df2 = df.groupby(score, sort=True)[label].agg(['count', 'sum'])
    df2 = df2.reset_index()
    df2.rename(columns={'sum': 'bad', 'count': 'total'}, inplace=True)
    df2['good'] = df2['total'] - df2['bad']
    bad = df2['bad'].sum()
    good = df2['good'].sum()
    df2['fpr'] = df2['good'].cumsum() / good
    df2['tpr'] = df2['bad'].cumsum() / bad

    if self.pdo > 0:
        df2['ks'] = df2['tpr'] - df2['fpr']
        df2['auc'] = (df2['tpr'].shift() + df2['tpr']) * df2['fpr'].diff() / 2
        df2.loc[0, 'auc'] = df2.loc[0, 'tpr'] * df2.loc[0, 'fpr'] / 2
    else:
        df2['ks'] = df2['fpr'] - df2['tpr']
        df2['auc'] = (df2['fpr'].shift() + df2['fpr']) * df2['tpr'].diff() / 2
        df2.loc[0, 'auc'] = df2.loc[0, 'fpr'] * df2.loc[0, 'tpr'] / 2

    ks = df2['ks'].max() * 100
    auc = df2['auc'].sum()

    print('Xinye The KS is %f, and AUC is %f' % (ks, auc))
    print(df2)

    if roc_plot:
        plt.title('ROC curve')
        plt.plot(df2['fpr'], df2['tpr'], 'b', label='AUC = %0.4f' % auc)
        plt.legend(loc='lower right')
        plt.plot([0, 1], [0, 1], 'g--')
        plt.xlim([0, 1])
        plt.ylim([0, 1])
        plt.ylabel('True Positive')
        plt.xlabel('False Positive')
        plt.show()

    if ks_plot:
        plt.title('KS curve (KS = %.2f)' % ks)
        plt.plot(df2['score'], df2['tpr'], 'b', label='Traing set: TPR')
        plt.plot(df2['score'], df2['fpr'], 'r', label='Traing set: FPR')
        plt.legend(loc='lower right')
        plt.plot([0, 1], [0, 1], 'k--')
        plt.xlim([df2['score'].min(), df2['score'].max()])
        plt.ylim([0, 1])
        plt.xlabel('score')
        plt.show()


@log_elapsed
def FATE_ks(labels, pred_scores):
    """
    Compute Kolmogorov-Smirnov
    Parameters
    ----------
    labels: value list. The labels of data set.
    pred_scores: pred_scores: value list. The predict results of model. It should be corresponding to labels each data.
    Returns
    ----------
    max_ks_interval: float max value of each tpr - fpt
    fpr:
    """
    score_label_list = []
    for i, label in enumerate(labels):
        score_label_list.append((pred_scores[i], label))

    score_label_list.sort(key=lambda x: x[0])
    min_score = int(score_label_list[0][0])
    max_score = int(score_label_list[-1][0])
    total_range = max_score - min_score
    step = np.ceil(total_range / 100) if total_range > 100 else np.ceil(total_range / 10)
    score_thresholds = [float(interval) for interval in range(min_score, max_score, int(step))]
    positive = len(list(filter(lambda label: label == 1, labels)))
    negative = len(labels) - positive
    fpr = []
    tpr = []
    ks = []
    if positive == 0 or negative == 0:
        raise ValueError("all labels are positive or negative, please check your data!")

    for score_threshold in score_thresholds:
        positive_recall = 0
        false_positive = 0
        for score_label in score_label_list:
            pre_score = score_label[0]
            label = score_label[1]
            if pre_score < score_threshold:
                if label == 1:
                    positive_recall += 1
                else:
                    false_positive += 1
        _tpr = positive_recall / positive
        _fpr = false_positive / negative
        _ks = _tpr - _fpr
        _ks = -_ks if 40 < 0 else _ks
        tpr.append(_tpr)
        fpr.append(_fpr)
        ks.append(_ks)

    fpr.append(1.0)
    tpr.append(1.0)
    # cuts.append(1.0)
    score_thresholds.append(int(max_score))

    auc_y, auc_x = (tpr, fpr) if 40 >= 0 else (fpr, tpr)
    auc = (shift(auc_y, 1) + auc_y)[1:] * np.diff(auc_x) / 2
    auc = np.sum(auc) + auc_x[0] * auc_y[0] / 2

    print('FATE The KS is %f, and AUC is %f' % (max(ks) * 100, auc))
    return max(ks), fpr, tpr, score_thresholds


if __name__ == '__main__':
    score_list = [428, 422, 428, 428, 428, 428, 428, 428, 428, 414, 428, 426, 428,
                  521, 414, 422, 426, 428, 428, 521, 428, 428, 521, 428, 426, 428,
                  422, 422, 428, 428, 428, 521, 416, 426, 428, 428, 428, 426, 428,
                  428, 428, 428, 422, 428, 426, 428, 428, 428, 428, 416, 428, 428,
                  428, 416, 428, 426, 428, 428, 428, 428, 428, 428, 428, 428, 428,
                  428, 422, 428, 428, 416, 428, 428, 428, 428, 428, 428, 428, 422,
                  428, 521, 422, 428, 428, 414, 428, 426, 428, 521, 428, 428, 428,
                  428, 428, 422, 428, 422, 428, 422, 414, 428, 428, 428, 428, 428,
                  428, 428, 416, 422, 428, 428, 428, 428, 426, 422, 428, 428, 422,
                  422, 422, 428, 422, 428, 428, 428, 422, 426, 428, 428, 428, 426,
                  428, 521, 428, 422, 428, 428, 428, 521, 422, 428, 426, 416, 422,
                  428, 414, 521, 428, 426, 426, 428, 428, 428, 428, 428, 416, 428,
                  428, 426, 428, 428, 428, 426, 428, 414, 428, 428, 428, 422, 428,
                  428, 426, 428, 416, 428, 428, 428, 428, 428, 428, 428, 428, 428,
                  414, 428, 428, 428, 416, 428, 422, 428, 428, 416, 422, 422, 416,
                  428, 428, 521, 428, 428, 428, 521, 416, 426, 428, 428, 428, 428,
                  428, 428, 422, 422, 414, 428, 428, 414, 422, 426, 521, 428, 428,
                  428, 422, 426, 428, 428, 428, 428, 416, 428, 428, 416, 428, 521,
                  428, 428, 422, 426, 414, 426, 428, 428, 426, 422, 426, 428, 414,
                  428, 426, 428, 426, 521, 428, 426, 428, 428, 428, 428, 422, 428,
                  428, 428, 428, 422, 428, 428, 428, 416, 428, 521, 428, 426, 416,
                  422, 428, 428, 521, 428, 428, 428, 428, 428, 428, 426, 428, 428,
                  428, 428, 416, 428, 428, 416, 521, 428, 422, 428, 428, 426, 428,
                  428, 428, 426, 414, 428, 428, 414, 428, 428, 428, 428, 428, 428,
                  428, 521, 428, 428, 422, 422, 428, 426, 422, 416, 521, 428, 428,
                  428, 416, 521, 428, 422, 422, 428, 521, 422, 521, 428, 428, 521,
                  422, 422, 428, 428, 428, 428, 428, 428, 521, 428, 422, 428, 428,
                  521, 428, 428, 428, 428, 428, 428, 428, 428, 426, 426, 428, 428,
                  428, 428, 426, 414, 414, 422, 428, 428, 428, 428, 422, 428, 428,
                  428, 428, 414, 426, 426, 428, 428, 428, 428, 428, 428, 414, 428,
                  426, 428, 428, 428, 521, 428, 428, 414, 414, 422, 416, 428, 428,
                  428, 426, 428, 428, 428, 428, 428, 521, 426, 428, 428, 416, 428,
                  422, 428, 414, 428, 428, 426, 426, 428, 428, 422, 428, 414, 422,
                  428, 414, 428, 426, 428, 428, 428, 428, 428, 428, 428, 428, 428,
                  428, 428, 422, 426, 422, 428, 422, 428, 428, 428, 428, 521, 428,
                  428, 426, 428, 428, 422, 428, 426, 426, 416, 428, 428, 428, 426,
                  428, 428, 414, 428, 428, 428, 428, 416, 428, 428, 426, 428, 416,
                  426, 521, 428, 422, 428, 428, 428, 428, 428, 428, 428, 422, 422,
                  428, 428, 428, 426, 428, 428, 426, 428, 422, 428, 428, 426, 426,
                  414, 521, 416, 426, 428, 428, 422, 426, 422, 428, 428, 426, 428,
                  428, 428, 414, 426, 422, 414, 428, 428, 428, 428, 414, 521, 428,
                  428, 428, 428, 428, 428, 422, 428, 428, 428, 414, 428, 428, 422,
                  428, 428, 422, 428, 428, 428, 428, 428, 428, 426, 428, 422, 428,
                  428, 428, 428, 422, 428, 416, 422, 428, 428, 428, 428, 422, 428,
                  428, 422, 416, 428, 426, 414, 521, 428, 414, 422, 428, 428, 428,
                  422, 428, 428, 422, 428, 428, 422, 428, 428, 428, 521, 428, 428,
                  428, 414, 416, 414, 422, 428, 428, 428, 422, 414, 521, 521, 414,
                  426, 422, 414, 414, 428, 428, 422, 414, 521, 422, 426, 428, 428,
                  428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 422, 426, 428,
                  428, 414, 428, 422, 422, 428, 428, 426, 428, 428, 428, 428, 428,
                  414, 428, 422, 428, 428, 422, 422, 416, 428, 428, 428, 428, 428,
                  428, 428, 422, 428, 426, 428, 426, 416, 428, 416, 422, 426, 428,
                  426, 428, 428, 428, 414, 428, 426, 426, 428, 428, 428, 426, 428,
                  521, 428, 426, 426, 414, 428, 414, 414, 428, 414, 428, 422, 426,
                  422, 428, 428, 414, 521, 428, 428, 414, 428, 426, 428, 428, 428,
                  521, 428, 422, 428, 428, 422, 414, 428, 428, 428, 414, 428, 414,
                  428, 422, 428, 428, 422, 428, 521, 521, 428, 521, 428, 428, 428,
                  521, 426, 414, 422, 428, 422, 426, 428, 422, 414, 414, 426, 426,
                  428, 416, 428, 426, 428, 422, 428, 428, 428, 414, 428, 422, 428,
                  428, 428, 428, 422, 428, 428, 422, 428, 521, 422, 428, 414, 414,
                  428, 414, 414, 426, 428, 428, 428, 422, 428, 428, 428, 422, 428,
                  416, 428, 428, 428, 521, 428, 426, 428, 422, 422, 428, 426, 426,
                  428, 428, 428, 428, 416, 428, 422, 428, 428, 428, 428, 428, 426,
                  428, 428, 428, 428, 428, 416, 428, 428, 426, 428, 422, 428, 426,
                  521, 422, 416, 426, 414, 428, 422, 521, 428, 428, 428, 416, 428,
                  428, 426, 428, 428, 428, 428, 428, 422, 428, 428, 521, 426, 414,
                  414, 416, 428, 422, 428, 414, 426, 428, 428, 428, 426, 416, 521,
                  428, 426, 426, 428, 428, 422, 426, 414, 428, 426, 428, 426, 428,
                  422, 416, 422, 414, 428, 422, 428, 428, 428, 428, 428, 428, 428,
                  428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 422, 416,
                  428, 414, 428, 414, 422, 426, 416, 422, 428, 428, 428, 422, 414,
                  428, 422, 428, 521, 428, 426, 416, 414, 428, 428, 428, 428, 426,
                  428, 422, 428, 428, 414, 428, 416, 426, 416, 428, 422, 428, 428,
                  426, 428, 426, 428, 428, 428, 414, 428, 428, 428, 428, 428, 428,
                  414, 428, 416, 414, 422, 422, 428, 428, 414, 428, 521, 414, 428,
                  416, 414, 428, 428, 428, 428, 428, 428, 416, 428, 428, 428, 416,
                  422, 428, 428, 422, 428, 426, 428, 414, 428, 428, 426, 428]
    label = [0,
             1,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             1,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             1,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             1,
             1,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             1,
             1,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             1,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             1,
             1,
             1,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             1,
             0,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             1,
             1,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             1,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             0,
             0,
             0,
             0,
             0,
             1,
             1,
             0,
             0,
             0,
             0,
             0,
             1,
             0,
             0,
             1,
             0,
             0,
             0,
             1,
             0,
             0]
    data = {"score": score_list * 100, "bad": label * 100}
    df = pd.DataFrame(data)
    Xinye_ks_roc(df, label="bad")
    print()
    FATE_ks(label, score_list)
